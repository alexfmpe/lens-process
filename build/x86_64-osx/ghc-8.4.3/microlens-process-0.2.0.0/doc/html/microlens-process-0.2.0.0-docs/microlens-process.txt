-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Micro-optics for the process library
--   
--   'microlens-process' is a set of multi-purpose optics and convenience
--   combinators for working with the <a>process</a> library, including a
--   more well-typed api for the parts that can be typed.
@package microlens-process
@version 0.2.0.0


-- | This module provides the associated optics and combinators for working
--   with <tt>CommandSpec</tt> objects. <tt>CommandSpec</tt> consists of
--   two cases: a Shell command, which is a command to execute naively in
--   the shell, and a Raw command which is a command path together with its
--   arguments.
--   
--   <tt>CommandSpec</tt> has two cases, and therefore a <a>Traversal</a>
--   into those two cases. There is also a convenient <a>Traversal</a>
--   available for working with the arglist of a Raw command and
--   combinators for working with arguments monoidally.
--   
--   We provide classy variants for all useful traversals
module System.Process.Microlens.CommandSpec

-- | A <a>Traversal'</a> into the <a>RawCommand</a> case of a
--   <a>CmdSpec</a>
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; RawCommand "/bin/ls" ["-l"] ^? _RawCommand
--   Just ("/bin/ls",["-l"])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; RawCommand "/bin/ls" ["-l"] ^? _ShellCommand
--   Nothing
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; RawCommand "/bin/ls" ["-l"] ^. _RawCommand . _1
--   "/bin/ls"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; RawCommand "/bin/ls" ["-l"] ^. _RawCommand . _2
--   ["-l"]
--   </pre>
_RawCommand :: Traversal' CmdSpec (FilePath, [String])

-- | A <a>Traversal'</a> into the <a>ShellCommand</a> case of a
--   <a>CmdSpec</a>
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; ShellCommand "ls -l" ^? _ShellCommand
--   Just "ls -l"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; RawCommand "/bin/ls" ["-l"] ^? _ShellCommand
--   Nothing
--   </pre>
_ShellCommand :: Traversal' CmdSpec String

-- | <a>Traversal'</a> into the arguments of a command
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; RawCommand "/bin/ls" ["-l"] ^. arguments
--   ["-l"]
--   </pre>
arguments :: Traversal' CmdSpec [String]

-- | Classy <a>Traversal'</a> into the shell command of a <a>CmdSpec</a>
class IsShell a
_Shell :: IsShell a => Traversal' a String

-- | Classy <a>Traversal'</a> into the raw command of a <a>CmdSpec</a>
class IsRaw a
_Raw :: IsRaw a => Traversal' a (FilePath, [String])

-- | Append an argument to the argument list of a <a>RawCommand</a>
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; arguing "-h" $ RawCommand "/bin/ls" ["-l"]
--   RawCommand "/bin/ls" ["-l","-h"]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; arguing "-h" (RawCommand "/bin/ls" ["-l"]) ^. arguments
--   ["-l","-h"]
--   </pre>
arguing :: String -> CmdSpec -> CmdSpec
instance System.Process.Microlens.CommandSpec.IsRaw System.Process.Common.CmdSpec
instance System.Process.Microlens.CommandSpec.IsShell System.Process.Common.CmdSpec


-- | This module provides the associated optics and combinators for working
--   with <a>CreateProcess</a> objects.
--   
--   Because <a>CreateProcess</a> was created before the `_` prefix record
--   name convention, some record accessors don't have an apparently "good"
--   name for their corresponding lens. Those that do not are post-fixed
--   with `_`. Thankfully, there are 6 that meet the criteria:
--   <a>cmdspec_</a>, <a>env_</a>, <a>cwd_</a>, <a>stdin_</a>,
--   <a>stdout_</a>, and <a>stderr_</a>.
--   
--   We provide classy variants of what we consider the significant
--   portions of <a>CreateProcess</a> - namely, the <a>std_in</a>,
--   <a>std_out</a>, and <a>std_err</a> entries.
module System.Process.Microlens.CreateProcess

-- | Lens into the <a>cmdspec</a> entry of the <a>CreateProcess</a> record
cmdspec_ :: Lens' CreateProcess CmdSpec

-- | Lens into the <a>cwd</a> entry of the <a>CreateProcess</a> record
cwd_ :: Lens' CreateProcess (Maybe FilePath)

-- | Lens into the <a>env</a> entry of the <a>CreateProcess</a> record
env_ :: Lens' CreateProcess (Maybe [(String, String)])

-- | Lens into the <a>std_in</a> entry of the <a>CreateProcess</a> record
stdin_ :: Lens' CreateProcess StdStream

-- | Lens into the <a>std_out</a> entry of the <a>CreateProcess</a> record
stdout_ :: Lens' CreateProcess StdStream

-- | Lens into the <a>std_err</a> entry of the <a>CreateProcess</a> record
stderr_ :: Lens' CreateProcess StdStream

-- | Lens into the <a>close_fds</a> entry of the <a>CreateProcess</a>
--   record
closefds :: Lens' CreateProcess Bool

-- | Lens into the <a>create_group</a> entry of the <a>CreateProcess</a>
--   record
creategroup :: Lens' CreateProcess Bool

-- | Lens into the <a>delegate_ctlc</a> entry of the <a>CreateProcess</a>
--   record
delegatectlc :: Lens' CreateProcess Bool

-- | Lens into the <a>new_session</a> entry of the <a>CreateProcess</a>
--   record
newsession :: Lens' CreateProcess Bool

-- | Lens into the <a>detach_console</a> entry of the <a>CreateProcess</a>
--   record
detachconsole :: Lens' CreateProcess Bool

-- | Lens into the <a>create_new_console</a> entry of the
--   <a>CreateProcess</a> record
createnewconsole :: Lens' CreateProcess Bool

-- | Lens into the <a>child_group</a> entry of the <a>CreateProcess</a>
--   record
childgroup :: Lens' CreateProcess (Maybe CGid)

-- | Lens into the <a>child_user</a> entry of the <a>CreateProcess</a>
--   record
childuser :: Lens' CreateProcess (Maybe CUid)

-- | Lens into the <a>use_process_jobs</a> entry of the
--   <a>CreateProcess</a> record
useprocessjobs :: Lens' CreateProcess Bool

-- | Classy lens for types with a stdin
class HasStdin a
_Stdin :: HasStdin a => Lens' a StdStream

-- | Classy lens for types with a stdout
class HasStdout a
_Stdout :: HasStdout a => Lens' a StdStream

-- | Classy lens for types with a stderr
class HasStderr a
_Stderr :: HasStderr a => Lens' a StdStream
instance System.Process.Microlens.CreateProcess.HasStderr System.Process.Common.StdStream
instance System.Process.Microlens.CreateProcess.HasStderr System.Process.Common.CreateProcess
instance System.Process.Microlens.CreateProcess.HasStdout System.Process.Common.StdStream
instance System.Process.Microlens.CreateProcess.HasStdout System.Process.Common.CreateProcess
instance System.Process.Microlens.CreateProcess.HasStdin System.Process.Common.StdStream
instance System.Process.Microlens.CreateProcess.HasStdin System.Process.Common.CreateProcess


-- | Convenient data type with associated optics + isos for working with
--   the output of a <a>createProcess</a> call.
module System.Process.Microlens.ProcessHandler

-- | A convenient handler for the output of a <a>createProcess</a> call.
--   This data containes 4 components:
--   
--   <ol>
--   <li>a handle to stdin if it was requested</li>
--   <li>a handle to stdout if it was requested</li>
--   <li>a handle to stderr if it was requested</li>
--   <li>a process handle, containing a pid lock, information regarding
--   ctcl-c delegation, and closed/open handle status info.</li>
--   </ol>
data ProcessHandler
ProcessHandler :: Maybe Handle -> Maybe Handle -> Maybe Handle -> ProcessHandle -> ProcessHandler
[_hstdin] :: ProcessHandler -> Maybe Handle
[_hstdout] :: ProcessHandler -> Maybe Handle
[_hstderr] :: ProcessHandler -> Maybe Handle
[_hhandle] :: ProcessHandler -> ProcessHandle

-- | A lens into the stdin handle if requested
hstdin :: Lens' ProcessHandler (Maybe Handle)

-- | A lens into the stdout handle if requested
hstdout :: Lens' ProcessHandler (Maybe Handle)

-- | A lens into the stderr handle if requested
hstderr :: Lens' ProcessHandler (Maybe Handle)

-- | A lens into the process handle
hhandle :: Lens' ProcessHandler ProcessHandle

-- | A default for a <a>CreateProcess</a>
defaultCreateProcess :: CreateProcess


-- | This module provides the associated optics and combinators for working
--   with <a>StdStream</a> objects. <a>StdStream</a> consists of four
--   cases, for which we provide traversals for each case
module System.Process.Microlens.StdStream

-- | A <a>Traversal'</a> into the <a>Inherit</a> structure of a
--   <a>StdStream</a>
_Inherit :: Traversal' StdStream StdStream

-- | A <a>Traversal'</a> into the <a>UseHandle</a> structure's Handle for a
--   <a>StdStream</a>
_UseHandle :: Traversal' StdStream Handle

-- | A <a>Traversal'</a> into the <a>CreatePipe</a> structure of a
--   <a>StdStream</a>
_CreatePipe :: Traversal' StdStream StdStream

-- | A <a>Traversal'</a> into the <a>NoStream</a> structure of a
--   <a>StdStream</a>
_NoStream :: Traversal' StdStream StdStream

-- | Class constraint proving a type has a prism into a <a>Handle</a> via a
--   <a>UseHandle</a> structure. Any <a>StdStream</a> will have a prism
--   into <a>CreatePipe</a> - it is just an overwrite to <a>CreatePipe</a>
class IsCreatePipe a
_CreatesPipe :: IsCreatePipe a => Traversal' a StdStream

-- | Class constraint proving a type has a prism into an <a>Inherit</a>
--   structure. Any <a>StdStream</a> will have a prism into <a>Inherit</a>
--   - it is just an overwrite to <a>Inherit</a>
class IsInherit a
_Inherits :: IsInherit a => Traversal' a StdStream

-- | Class constraint proving a type has a prism into a <a>Handle</a> via a
--   <a>UseHandle</a> structure.
class IsUseHandle a
_UsesHandle :: IsUseHandle a => Traversal' a Handle

-- | Class constraint proving a type has a prism into a <a>Handle</a> via a
--   <a>UseHandle</a> structure. Any <a>StdStream</a> will have a prism
--   into <a>NoStream</a> - it is just an overwrite to <a>NoStream</a>.
class IsNoStream a
_NoStreams :: IsNoStream a => Traversal' a StdStream

-- | Given a lens into a <a>StdStream</a>, overwrite to <a>Inherit</a> so
--   that the stream inherits from its parent process
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; inheriting ($) CreatePipe
--   Inherit
--   </pre>
inheriting :: Lens' a StdStream -> a -> a

-- | Given a lens into a <a>StdStream</a>, overwrite to <a>CreatePipe</a>.
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; piping ($) NoStream
--   CreatePipe
--   </pre>
piping :: Lens' a StdStream -> a -> a

-- | Given a lens into a <a>StdStream</a> and a handle, set the handle
--   using <a>UseHandle</a>. Note that this is the only really interesting
--   case for anything with a lens into a handle inculding
--   <a>StdStream</a>.
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; handling ($) System.stdin $ UseHandle System.stdout
--   UseHandle {handle: &lt;stdin&gt;}
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; handling ($) System.stdout Inherit
--   UseHandle {handle: &lt;stdout&gt;}
--   </pre>
handling :: Lens' a StdStream -> Handle -> a -> a

-- | Given a lens into a <a>StdStream</a>, set to <a>NoStream</a>
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; nostreaming ($) Inherit
--   NoStream
--   </pre>
nostreaming :: Lens' a StdStream -> a -> a
instance System.Process.Microlens.StdStream.IsNoStream System.Process.Common.StdStream
instance System.Process.Microlens.StdStream.IsCreatePipe System.Process.Common.StdStream
instance System.Process.Microlens.StdStream.IsUseHandle System.Process.Common.StdStream
instance System.Process.Microlens.StdStream.IsInherit System.Process.Common.StdStream


-- | Just the (classy) optics
module System.Process.Microlens.Optics

-- | A <a>Traversal'</a> into the <a>ShellCommand</a> case of a
--   <a>CmdSpec</a>
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; ShellCommand "ls -l" ^? _ShellCommand
--   Just "ls -l"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; RawCommand "/bin/ls" ["-l"] ^? _ShellCommand
--   Nothing
--   </pre>
_ShellCommand :: Traversal' CmdSpec String

-- | A <a>Traversal'</a> into the <a>RawCommand</a> case of a
--   <a>CmdSpec</a>
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; RawCommand "/bin/ls" ["-l"] ^? _RawCommand
--   Just ("/bin/ls",["-l"])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; RawCommand "/bin/ls" ["-l"] ^? _ShellCommand
--   Nothing
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; RawCommand "/bin/ls" ["-l"] ^. _RawCommand . _1
--   "/bin/ls"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; RawCommand "/bin/ls" ["-l"] ^. _RawCommand . _2
--   ["-l"]
--   </pre>
_RawCommand :: Traversal' CmdSpec (FilePath, [String])

-- | A <a>Traversal'</a> into the <a>Inherit</a> structure of a
--   <a>StdStream</a>
_Inherit :: Traversal' StdStream StdStream

-- | A <a>Traversal'</a> into the <a>UseHandle</a> structure's Handle for a
--   <a>StdStream</a>
_UseHandle :: Traversal' StdStream Handle

-- | A <a>Traversal'</a> into the <a>CreatePipe</a> structure of a
--   <a>StdStream</a>
_CreatePipe :: Traversal' StdStream StdStream

-- | A <a>Traversal'</a> into the <a>NoStream</a> structure of a
--   <a>StdStream</a>
_NoStream :: Traversal' StdStream StdStream

-- | <a>Traversal'</a> into the arguments of a command
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; RawCommand "/bin/ls" ["-l"] ^. arguments
--   ["-l"]
--   </pre>
arguments :: Traversal' CmdSpec [String]

-- | Lens into the <a>cmdspec</a> entry of the <a>CreateProcess</a> record
cmdspec_ :: Lens' CreateProcess CmdSpec

-- | Lens into the <a>cwd</a> entry of the <a>CreateProcess</a> record
cwd_ :: Lens' CreateProcess (Maybe FilePath)

-- | Lens into the <a>env</a> entry of the <a>CreateProcess</a> record
env_ :: Lens' CreateProcess (Maybe [(String, String)])

-- | Lens into the <a>std_in</a> entry of the <a>CreateProcess</a> record
stdin_ :: Lens' CreateProcess StdStream

-- | Lens into the <a>std_out</a> entry of the <a>CreateProcess</a> record
stdout_ :: Lens' CreateProcess StdStream

-- | Lens into the <a>std_err</a> entry of the <a>CreateProcess</a> record
stderr_ :: Lens' CreateProcess StdStream

-- | Lens into the <a>close_fds</a> entry of the <a>CreateProcess</a>
--   record
closefds :: Lens' CreateProcess Bool

-- | Lens into the <a>create_group</a> entry of the <a>CreateProcess</a>
--   record
creategroup :: Lens' CreateProcess Bool

-- | Lens into the <a>delegate_ctlc</a> entry of the <a>CreateProcess</a>
--   record
delegatectlc :: Lens' CreateProcess Bool

-- | Lens into the <a>new_session</a> entry of the <a>CreateProcess</a>
--   record
newsession :: Lens' CreateProcess Bool

-- | Lens into the <a>detach_console</a> entry of the <a>CreateProcess</a>
--   record
detachconsole :: Lens' CreateProcess Bool

-- | Lens into the <a>create_new_console</a> entry of the
--   <a>CreateProcess</a> record
createnewconsole :: Lens' CreateProcess Bool

-- | Lens into the <a>child_group</a> entry of the <a>CreateProcess</a>
--   record
childgroup :: Lens' CreateProcess (Maybe CGid)

-- | Lens into the <a>child_user</a> entry of the <a>CreateProcess</a>
--   record
childuser :: Lens' CreateProcess (Maybe CUid)

-- | Lens into the <a>use_process_jobs</a> entry of the
--   <a>CreateProcess</a> record
useprocessjobs :: Lens' CreateProcess Bool

-- | A lens into the stdin handle if requested
hstdin :: Lens' ProcessHandler (Maybe Handle)

-- | A lens into the stdout handle if requested
hstdout :: Lens' ProcessHandler (Maybe Handle)

-- | A lens into the stderr handle if requested
hstderr :: Lens' ProcessHandler (Maybe Handle)

-- | A lens into the process handle
hhandle :: Lens' ProcessHandler ProcessHandle

-- | Classy <a>Traversal'</a> into the raw command of a <a>CmdSpec</a>
class IsRaw a
_Raw :: IsRaw a => Traversal' a (FilePath, [String])

-- | Classy <a>Traversal'</a> into the shell command of a <a>CmdSpec</a>
class IsShell a
_Shell :: IsShell a => Traversal' a String

-- | Class constraint proving a type has a prism into an <a>Inherit</a>
--   structure. Any <a>StdStream</a> will have a prism into <a>Inherit</a>
--   - it is just an overwrite to <a>Inherit</a>
class IsInherit a
_Inherits :: IsInherit a => Traversal' a StdStream

-- | Class constraint proving a type has a prism into a <a>Handle</a> via a
--   <a>UseHandle</a> structure.
class IsUseHandle a
_UsesHandle :: IsUseHandle a => Traversal' a Handle

-- | Class constraint proving a type has a prism into a <a>Handle</a> via a
--   <a>UseHandle</a> structure. Any <a>StdStream</a> will have a prism
--   into <a>CreatePipe</a> - it is just an overwrite to <a>CreatePipe</a>
class IsCreatePipe a
_CreatesPipe :: IsCreatePipe a => Traversal' a StdStream

-- | Class constraint proving a type has a prism into a <a>Handle</a> via a
--   <a>UseHandle</a> structure. Any <a>StdStream</a> will have a prism
--   into <a>NoStream</a> - it is just an overwrite to <a>NoStream</a>.
class IsNoStream a
_NoStreams :: IsNoStream a => Traversal' a StdStream

-- | Classy lens for types with a stdin
class HasStdin a
_Stdin :: HasStdin a => Lens' a StdStream

-- | Classy lens for types with a stdout
class HasStdout a
_Stdout :: HasStdout a => Lens' a StdStream

-- | Classy lens for types with a stderr
class HasStderr a
_Stderr :: HasStderr a => Lens' a StdStream


-- | This module provides all of the optical exports, as well ask any
--   associated combinators. For just the optics, see <a>Optics</a>, or if
--   you are in need of something lighter weight, just for working with a
--   <tt>CreateProcess</tt> in terms of getters and setters, see
--   <a>https://hackage.haskell.org/package/microlens</a>
--   
--   For more information on usage and how to work with lenses, see
--   <a>http://github.com/ekmett/lens/wiki</a> and the tests for example
--   uses. You can also ask questions on Freenode in the #haskell-lens
--   channel.
module System.Process.Microlens
